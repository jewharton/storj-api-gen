// Copyright (C) 2021 Storj Labs, Inc.
// See LICENSE for copying information.
// Code generated by ???. DO NOT EDIT.

import { HttpClient } from '@/utils/httpClient';

{{- range $serviceName := $.Services }}
	{{- if (index $.ApiDef $serviceName) }}

export class {{ strtitle $serviceName }}HttpApi {
	private readonly client: HttpClient = new HttpClient();
    private readonly ROOT_PATH: string = '/api/v0/{{ $serviceName }}';

	{{- range $endpoint := (index $.ApiDef $serviceName)}}
		{{- $funcName := print (tolower (substr $endpoint.FuncName 0 1)) (substr $endpoint.FuncName 1 (len $endpoint.FuncName)) }}
	
	public async {{ $funcName }}(
		{{- if $endpoint.Request -}}
			request: {{ $endpoint.FuncName }}Request
		{{- end -}}
	): Promise<
		{{- if $endpoint.Response }}
			{{- $endpoint.FuncName }}Response
		{{- else -}}
			void
		{{- end -}}
	> {
		const path = `${this.ROOT_PATH}{{ $endpoint.Path }}`
		const response = await this.client.{{ tolower $endpoint.Method }}(path
		{{- if $endpoint.Request -}}
			, JSON.stringify(request)
		{{- end }});

		if (response.ok) {
			return{{ if $endpoint.Response }} await response.json(){{ end }};
		}

		return;

		// TODO: Error handling
	}
	{{- end }}
}
	{{- end }}
{{- end }}

// TODO: Make <Func>Request, <Func>Response classes
